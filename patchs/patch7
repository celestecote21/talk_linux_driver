From 9dcb7edec411026f4c82fda3feb1e24919404294 Mon Sep 17 00:00:00 2001
From: celeste cote <celeste@cote21.fr>
Date: Mon, 8 Feb 2021 10:48:57 +0000
Subject: [PATCH] patch6: send letters througt the led

---
 blink_kern.c | 95 ++++++++++++++++++++++++++++++++++++++++++----------
 letters.h    | 74 ++++++++++++++++++++++++++++++++++++++++
 2 files changed, 151 insertions(+), 18 deletions(-)
 create mode 100644 letters.h

diff --git a/blink_kern.c b/blink_kern.c
index 55bb45a..0e7e4d5 100644
--- a/blink_kern.c
+++ b/blink_kern.c
@@ -11,6 +11,8 @@
 #include <linux/kthread.h>
 #include <linux/delay.h>
 
+#include "letters.h"
+
 #define LOG(str) (printk(KERN_ALERT "BLINK DRV: %s\n", str))
 #define LOGINFO(str) (printk(KERN_INFO "BLINK DRV: %s\n", str))
 
@@ -23,22 +25,84 @@ dev_t dev = MKDEV(55, 12);
 // the class struct will represent the /sys/class of the device
 static struct class *dev_class;
 
+static struct cdev cdev;
+
 static int blink_pr = 200;
 
 module_param(blink_pr, int, S_IWUSR | S_IWGRP | S_IRUGO);
 MODULE_PARM_DESC(blink_pr, "Blink period in ms");
 
-// this is the pointeur to the thread task
-static struct task_struct *task;
+static int my_open(struct inode *inode, struct file *file);
+static int my_release(struct inode *inode, struct file *file);
+static ssize_t my_read(struct file *filp, char *buf, size_t len,loff_t * off);
+static ssize_t my_write(struct file *filp, const char *buf, size_t len, loff_t * off);
+
+
+static struct file_operations file_ops =
+{
+    .owner = THIS_MODULE,
+    .read = my_read,
+    .write = my_write,
+    .open = my_open,
+    .release = my_release,
+};
+
+static int my_open(struct inode *inode, struct file *file)
+{
+    return (0);
+}
+
+static int my_release(struct inode *inode, struct file *file)
+{
+    return (0);
+}
+
+static ssize_t my_read(struct file *filp, char __user *buf, size_t len, loff_t *off)
+{
+    return (0);
+}
 
-static int blink(void *arg)
+int get_code(char c)
 {
-    while (!kthread_should_stop()) {
-        set_current_state(TASK_RUNNING);
+    int i = 0;
+
+    while (i < nb_letter) {
+        if (letters[i].c == c)
+            return (i);
+        i++;
+    }
+    return (nb_letter - 1);
+}
+
+int send_letter(char const c)
+{
+    int i = 0;
+    int index_code = get_code(c);
+
+    while (i < 6) {
+        gpio_set_value(GPIO_CTRL_OUT, letters[index_code].code[i]);
+        msleep(blink_pr);
+        gpio_set_value(GPIO_CTRL_OUT, 0);
         msleep(blink_pr);
-        gpio_set_value(GPIO_CTRL_OUT, !gpio_get_value(GPIO_CTRL_OUT));
+        i++;
     }
-    return (0);
+    return (1);
+}
+
+static ssize_t my_write(struct file *filp, const char *buf, size_t len, loff_t * off)
+{
+    int i = 0;
+    if (buf == NULL)
+        return (-1);
+
+    gpio_set_value(GPIO_CTRL_OUT, 1);
+    msleep(blink_pr * 12);
+    gpio_set_value(GPIO_CTRL_OUT, 0);
+    while (i < len) {
+        send_letter(buf[i]);
+        i++;
+    }
+    return (i);
 }
 
 static int __init drv_blink_init(void)
@@ -62,6 +126,11 @@ static int __init drv_blink_init(void)
 	    LOG("error can't create the device\n");
         goto r_class;
     }
+    cdev_init(&cdev, &file_ops);
+    if (cdev_add(&cdev, dev, 1) < 0) {
+	    LOG("can't add file ops\n");
+        goto r_class;
+    }
 
     gpio_request(GPIO_CTRL_OUT, "sysfs");
     // Set the gpio to be in output mode
@@ -69,14 +138,7 @@ static int __init drv_blink_init(void)
     // Causes to appear in /sys/class/gpio
     gpio_export(GPIO_CTRL_OUT, false);
     // at the start we put the value at 1 -> the Led will light up
-    gpio_set_value(GPIO_CTRL_OUT, 1);
-
-    // Now we will start a kernel thread (it will be detached)
-    task = kthread_run(blink, NULL, "blink_thread");
-    if (IS_ERR(task)) {
-        LOG("the blink task fail to run");
-        goto r_gpio;
-    }
+    gpio_set_value(GPIO_CTRL_OUT, 0);
 
     return (0);
 
@@ -101,9 +163,6 @@ static void drv_blink_exit(void)
     // free the region in the dev
     unregister_chrdev_region(dev, 1);
 
-    // don't forget to stop the task
-    kthread_stop(task);
-
     // unrealease our GPIO
     gpio_set_value(GPIO_CTRL_OUT, 0);
     gpio_unexport(GPIO_CTRL_OUT);
diff --git a/letters.h b/letters.h
new file mode 100644
index 0000000..f691656
--- /dev/null
+++ b/letters.h
@@ -0,0 +1,74 @@
+#ifndef HEADER_LETTERS
+#define HEADER_LETTERS
+
+typedef struct letter {
+    char c;
+    char code[6];
+} letter_t;
+
+const int nb_letter = 62;
+letter_t letters[] = {{'a', {0, 0, 0, 0, 0, 0}},
+        {'b', {0, 0, 0, 0, 0, 1}},
+        {'c', {0, 0, 0, 0, 1, 0}},
+        {'d', {0, 0, 0, 0, 1, 1}},
+        {'e', {0, 0, 0, 1, 0, 0}},
+        {'f', {0, 0, 0, 1, 0, 1}},
+        {'g', {0, 0, 0, 1, 1, 0}},
+        {'h', {0, 0, 0, 1, 1, 1}},
+        {'i', {0, 0, 1, 0, 0, 0}},
+        {'j', {0, 0, 1, 0, 0, 1}},
+        {'k', {0, 0, 1, 0, 1, 0}},
+        {'l', {0, 0, 1, 0, 1, 1}},
+        {'m', {0, 0, 1, 1, 0, 0}},
+        {'n', {0, 0, 1, 1, 0, 1}},
+        {'o', {0, 0, 1, 1, 1, 0}},
+        {'p', {0, 0, 1, 1, 1, 1}},
+        {'q', {0, 1, 0, 0, 0, 0}},
+        {'r', {0, 1, 0, 0, 0, 1}},
+        {'s', {0, 1, 0, 0, 1, 0}},
+        {'t', {0, 1, 0, 0, 1, 1}},
+        {'u', {0, 1, 0, 1, 0, 0}},
+        {'v', {0, 1, 0, 1, 0, 1}},
+        {'w', {0, 1, 0, 1, 1, 0}},
+        {'x', {0, 1, 0, 1, 1, 1}},
+        {'y', {0, 1, 1, 0, 0, 0}},
+        {'z', {0, 1, 1, 0, 0, 1}},
+        {'A', {0, 1, 1, 0, 1, 0}},
+        {'B', {0, 1, 1, 0, 1, 1}},
+        {'C', {0, 1, 1, 1, 0, 0}},
+        {'D', {0, 1, 1, 1, 0, 1}},
+        {'E', {0, 1, 1, 1, 1, 0}},
+        {'F', {0, 1, 1, 1, 1, 1}},
+        {'G', {1, 0, 0, 0, 0, 0}},
+        {'H', {1, 0, 0, 0, 0, 1}},
+        {'I', {1, 0, 0, 0, 1, 0}},
+        {'J', {1, 0, 0, 0, 1, 1}},
+        {'K', {1, 0, 0, 1, 0, 0}},
+        {'L', {1, 0, 0, 1, 0, 1}},
+        {'M', {1, 0, 0, 1, 1, 0}},
+        {'N', {1, 0, 0, 1, 1, 1}},
+        {'O', {1, 0, 1, 0, 0, 0}},
+        {'P', {1, 0, 1, 0, 0, 1}},
+        {'Q', {1, 0, 1, 0, 1, 0}},
+        {'R', {1, 0, 1, 0, 1, 1}},
+        {'S', {1, 0, 1, 1, 0, 0}},
+        {'T', {1, 0, 1, 1, 0, 1}},
+        {'U', {1, 0, 1, 1, 1, 0}},
+        {'V', {1, 0, 1, 1, 1, 1}},
+        {'W', {1, 1, 0, 0, 0, 0}},
+        {'X', {1, 1, 0, 0, 0, 1}},
+        {'Y', {1, 1, 0, 0, 1, 0}},
+        {'Z', {1, 1, 0, 0, 1, 1}},
+        {'0', {1, 1, 0, 1, 0, 0}},
+        {'1', {1, 1, 0, 1, 0, 1}},
+        {'2', {1, 1, 0, 1, 1, 0}},
+        {'3', {1, 1, 0, 1, 1, 1}},
+        {'4', {1, 1, 1, 0, 0, 0}},
+        {'5', {1, 1, 1, 0, 0, 1}},
+        {'6', {1, 1, 1, 0, 1, 0}},
+        {'7', {1, 1, 1, 0, 1, 1}},
+        {'8', {1, 1, 1, 1, 0, 0}},
+        {'9', {1, 1, 1, 1, 0, 1}}
+};
+
+#endif
-- 
2.20.1

